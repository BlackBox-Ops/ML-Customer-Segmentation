@startuml class
class User {
    - userID: String
    - username: String
    - password: String
    - role: String
    + login(): Boolean
    + logout(): Void
    + executeQuery(query: String): ResultSet
}

class Admin {
    - settingsPermissions: Boolean
    + manageCustomerData(data: CustomerData): Void
    + updateSettings(settings: ApplicationSettings): Void
    + executeQuery(query: String): ResultSet
}

class Analyst {
    - reportAccessLevel: String
    + generateReports(criteria: String): Report
    + visualizeSegmentation(data: SegmentationData): Visualization
    + executeQuery(query: String): ResultSet
}

class EndUser {
    - accessLevel: String
    + viewSegmentation(segmentID: String): Visualization
    + executeQuery(query: String): ResultSet
}

class CustomerData {
    - customerID: String
    - name: String
    - demographicInfo: String
    - purchaseHistory: List<Purchase>
    + updateData(customerID: String, data: CustomerData): Void
    + deleteData(customerID: String): Void
    + executeQuery(query: String): ResultSet
}

class DataManagement {
    - exportFormat: String
    + exportData(format: String): File
    + validateData(data: CustomerData): Boolean
    + executeQuery(query: String): ResultSet
}

class CustomerSegmentation {
    - segmentID: String
    - segmentName: String
    - segmentCriteria: String
    + predictSegment(data: CustomerData): Segment
    + assignSegment(customerID: String, segmentID: String): Void
    + executeQuery(query: String): ResultSet
}

class ApplicationSettings {
    - theme: String
    - language: String
    - dataRetentionPolicy: String
    + updateSetting(settingName: String, value: String): Void
    + executeQuery(query: String): ResultSet
}

class KoneksiBasisData {
    - connectionString: String
    - username: String
    - password: String
    + connect(): Boolean
    + disconnect(): Void
    + executeQuery(query: String): ResultSet
}

class Validasi {
    + validateInput(input: Object): Boolean
    + validatePermissions(user: User): Boolean
    + validateDataFormat(data: Object): Boolean
}

class Antarmuka {
    + tampilkanMenu(): Void
    + ambilInput(): String
    + tampilkanPesan(pesan: String): Void
    + tampilkanData(data: Object): Void
}

class Main {
    + main(args: String[]): Void
}

User <|-- Admin
User <|-- Analyst
User <|-- EndUser

Admin "1" --> "1..*" CustomerData
Analyst "1" --> "1..*" CustomerData
CustomerData "1" --> "1" CustomerSegmentation
CustomerSegmentation "1..*" --> "1" DataManagement
DataManagement "1..*" --> "1" ApplicationSettings
Analyst "1" --> "1" DataManagement
EndUser "1" --> "1" CustomerSegmentation

User --> KoneksiBasisData : "uses"
CustomerData --> Validasi : "validates"
CustomerSegmentation --> Validasi : "validates"
Main --> User : "manages"
Main --> KoneksiBasisData : "initializes"
Antarmuka --> User : "interacts with"
Antarmuka --> CustomerData : "interacts with"
Antarmuka --> CustomerSegmentation : "interacts with"
Antarmuka --> DataManagement : "interacts with"
Antarmuka --> ApplicationSettings : "interacts with"
@enduml
